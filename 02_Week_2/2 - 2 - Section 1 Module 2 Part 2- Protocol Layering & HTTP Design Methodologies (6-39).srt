1
00:00:00,002 --> 00:00:08,555
[MUSIC]

2
00:00:08,555 --> 00:00:14,417
What we've seen by our attempt to map the
video service onto HTTP, is

3
00:00:14,417 --> 00:00:20,510
that a protocol like HTTP can have other
protocols layered on top of it.

4
00:00:20,510 --> 00:00:24,280
In our case, we're layering a protocol for
interacting with our

5
00:00:24,280 --> 00:00:27,680
video service, on top of the HTTP
protocol, and this is one

6
00:00:27,680 --> 00:00:30,780
of the important principles to understand

7
00:00:30,780 --> 00:00:33,210
with, you know, network communication
product

8
00:00:33,210 --> 00:00:36,410
protocols, is that you can layer them on
top of each other.

9
00:00:36,410 --> 00:00:40,340
So, often you'll have a protocol like
HTTP.

10
00:00:42,170 --> 00:00:46,285
And it may be layered on top of something
else like

11
00:00:46,285 --> 00:00:53,380
TCP/IP which again may be layered on a
series of other things.

12
00:00:53,380 --> 00:00:58,420
And then above HTTP may be other protocols
that we

13
00:00:58,420 --> 00:01:02,770
create like the protocol for interacting
with our video service.

14
00:01:02,770 --> 00:01:08,170
So we're specifying rules for interaction
and exchange of messages and

15
00:01:08,170 --> 00:01:11,570
formatting of those messages, and where
layering them on top of HTTP.

16
00:01:11,570 --> 00:01:16,420
And similarly, if we defined a nice
interface, other

17
00:01:16,420 --> 00:01:20,010
protocols could even be layered on top of
our protocol.

18
00:01:20,010 --> 00:01:25,690
So it's important to understand that HTTP,
although it is what we're

19
00:01:25,690 --> 00:01:31,900
primarily targeting, is just a protocol
layer among many in the application.

20
00:01:31,900 --> 00:01:34,710
And we have to understand the underlying
protocol

21
00:01:34,710 --> 00:01:37,660
layers that are involved when we're
building our application.

22
00:01:37,660 --> 00:01:40,240
But particularly, we want to understand
what the

23
00:01:40,240 --> 00:01:43,440
different options are for building on top
of HTTP.

24
00:01:45,070 --> 00:01:48,420
As we've seen, there are a lot of design
choices

25
00:01:48,420 --> 00:01:51,920
that we're making about how we use the
interface and

26
00:01:51,920 --> 00:01:56,140
constructs provided by HTTP to encode the
data about our

27
00:01:56,140 --> 00:01:59,950
videos and send them to the service that
we're talking to.

28
00:01:59,950 --> 00:02:02,920
Similarly, there's all kinds of design
decisions such

29
00:02:02,920 --> 00:02:05,268
as how we design the URLs, how would

30
00:02:05,268 --> 00:02:10,530
we encode parameters, do we use it in a, a
query parameter or a request body?

31
00:02:10,530 --> 00:02:15,620
Do we send request bodies that are
multi-part encoded or form URL encoded?

32
00:02:15,620 --> 00:02:18,570
And there's all of these decisions that we

33
00:02:18,570 --> 00:02:22,380
have to make in the design of our
application.

34
00:02:22,380 --> 00:02:25,268
And we do them by building layers of
protocols in.

35
00:02:25,268 --> 00:02:30,500
Now an important, thing to know, of some
of the common

36
00:02:30,500 --> 00:02:35,850
names for protocols that are built on top
of HTTP, or some of the common

37
00:02:35,850 --> 00:02:41,500
design methodologies, that are built on
top of HTTP, that describe,

38
00:02:41,500 --> 00:02:45,790
how you take messages or services and

39
00:02:45,790 --> 00:02:50,662
describe them using HTTP-based
interactions.

40
00:02:50,662 --> 00:02:56,310
One that you may have heard of that gets
built on top of HTTP is web services.

41
00:02:58,860 --> 00:03:04,350
And as anything that becomes very popular
at some point.

42
00:03:04,350 --> 00:03:06,580
And is very technical.

43
00:03:06,580 --> 00:03:08,380
At some point, it gets taken and

44
00:03:08,380 --> 00:03:11,760
it's original true definition becomes
watered down.

45
00:03:11,760 --> 00:03:15,810
So originally web services had a very
specific definition.

46
00:03:15,810 --> 00:03:18,840
It meant that we were doing things like,
describing our

47
00:03:18,840 --> 00:03:23,920
services with things like WSDL or Web
Services Definition Language.

48
00:03:23,920 --> 00:03:29,370
Or sending messages that were based on
SOAP, or simple object access protocol.

49
00:03:29,370 --> 00:03:33,330
But later on, what's happened over time is
as sales and marketing

50
00:03:33,330 --> 00:03:38,140
and other folks start talking about web
services which is inherently technical.

51
00:03:38,140 --> 00:03:41,530
They start talking about it in a more
watered-down fashion.

52
00:03:41,530 --> 00:03:45,880
Web services, over time evolved from
meaning that you were using WSDL and

53
00:03:45,880 --> 00:03:50,350
SOAP to just meaning that you had a
service that was accessible over HTTP.

54
00:03:51,910 --> 00:03:59,300
Similarly, the really popular thing that
you hear these days is about REST.

55
00:03:59,300 --> 00:04:03,530
And a REST API is a representational state
transfer API.

56
00:04:03,530 --> 00:04:05,460
And this was something that was laid out

57
00:04:05,460 --> 00:04:09,350
by Ray, Roy Fielding in his di, PhD
dissertation,

58
00:04:09,350 --> 00:04:13,420
and it's a very specific set of rules for

59
00:04:13,420 --> 00:04:17,740
building a protocol and interface on top
of HTTP.

60
00:04:19,030 --> 00:04:25,580
Most, of the, the people that you say that
have a REST API aren't actually doing

61
00:04:25,580 --> 00:04:29,810
what's described in full in the REST
vision

62
00:04:29,810 --> 00:04:31,960
that Roy Fielding laid out in his
dissertation.

63
00:04:31,960 --> 00:04:35,685
What they're doing is building a service
that can

64
00:04:35,685 --> 00:04:41,770
be interacted with over HTTP and has
REST-like properties potentially.

65
00:04:41,770 --> 00:04:45,350
So it maybe doing some of the things that
REST describes but

66
00:04:45,350 --> 00:04:48,160
not all of them or not doing any of them
at all.

67
00:04:48,160 --> 00:04:52,540
Everybody has started taking things that
were inherently technical, web services

68
00:04:52,540 --> 00:04:56,090
or REST and they start describing them in
a very loose manner.

69
00:04:56,090 --> 00:04:58,780
So when you hear web services, the true
definition is

70
00:04:58,780 --> 00:05:01,780
something like WSDL and SOAP and other
things being used.

71
00:05:01,780 --> 00:05:05,054
The true definition of REST is something
very specific laid

72
00:05:05,054 --> 00:05:08,333
out in a PhD dissertation, but they get
used very loosely.

73
00:05:08,333 --> 00:05:12,652
So someone says to you, do you have a REST
API?

74
00:05:12,652 --> 00:05:16,880
You need to figure out do they mean, do
you have the watered down definition of

75
00:05:16,880 --> 00:05:21,124
REST API, which means do you have some
service that you can talk to over HTTP.

76
00:05:21,124 --> 00:05:23,752
Or do they really, specifically mean do
you follow all of

77
00:05:23,752 --> 00:05:26,930
the rules of REST, all of the design
principles of REST?

78
00:05:26,930 --> 00:05:28,340
And the answer is probably no.

79
00:05:28,340 --> 00:05:29,785
That's not what they mean.

80
00:05:29,785 --> 00:05:33,502
But it's important to understand that web
services

81
00:05:33,502 --> 00:05:37,557
and REST are basically methodologies for
building on top

82
00:05:37,557 --> 00:05:41,950
of HTTP, that describe very specific
formats and principles

83
00:05:41,950 --> 00:05:45,597
that you use when you're building things
on HTTP.

84
00:05:45,597 --> 00:05:49,136
But, what we're going to focus on, and we
will be building

85
00:05:49,136 --> 00:05:53,060
things that are REST like, but are not
true REST necessarily.

86
00:05:53,060 --> 00:05:55,110
Well, some of the things will be true
REST.

87
00:05:55,110 --> 00:05:57,920
They're provided by the Spring framework
that we're going to talk about.

88
00:05:57,920 --> 00:05:59,310
But most of the things we're going to be
talking

89
00:05:59,310 --> 00:06:03,750
about really fall into, it is a service
that is.

90
00:06:03,750 --> 00:06:07,660
I, you know, accessible via HTTP, and it

91
00:06:07,660 --> 00:06:09,912
may have REST-like properties or it may
have web

92
00:06:09,912 --> 00:06:12,760
service-like properties, depending on how
you design it,

93
00:06:12,760 --> 00:06:15,630
but this is the core of where things sit.

94
00:06:15,630 --> 00:06:18,700
This is where cloud services really come
into play, is

95
00:06:18,700 --> 00:06:21,480
we're building in some object which can
live in the

96
00:06:21,480 --> 00:06:24,420
cloud or some service which can live in
the cloud

97
00:06:24,420 --> 00:06:30,290
and can receive information and be
interacted with over HTTP.

98
00:06:30,290 --> 00:06:33,580
And depending on the design of that
service, those interactions may

99
00:06:33,580 --> 00:06:36,450
follow a REST model, or they may follow a
web service model.

100
00:06:36,450 --> 00:06:39,370
And it just depends on how they're
actually implemented.

