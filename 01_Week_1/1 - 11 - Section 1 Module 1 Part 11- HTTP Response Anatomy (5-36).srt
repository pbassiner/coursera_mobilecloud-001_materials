1
00:00:00,058 --> 00:00:08,933
[MUSIC]

2
00:00:08,933 --> 00:00:13,847
The anatomy of an HTTP response is a very
critical component to know

3
00:00:13,847 --> 00:00:19,040
when we're building applications that are
communicating via HTTP.

4
00:00:20,190 --> 00:00:23,030
So, one of the important things that we
have to

5
00:00:23,030 --> 00:00:26,860
consider when we're sending messages to
some remote server and

6
00:00:26,860 --> 00:00:30,230
asking it to, give us a resource or take
some

7
00:00:30,230 --> 00:00:35,160
action on that resource, is what happened
on the server.

8
00:00:35,160 --> 00:00:38,530
We can't directly be present on the server
when it's

9
00:00:38,530 --> 00:00:43,070
accessing that resource to see if it
successfully accessed it.

10
00:00:43,070 --> 00:00:47,270
Or if there was a problem or if something
else interesting happened, for example,

11
00:00:47,270 --> 00:00:50,920
the resource has been moved and the server
needs to tell us about that.

12
00:00:51,940 --> 00:00:58,060
So one of the really important and first
components that's related to the anatomy

13
00:00:58,060 --> 00:01:03,900
of a response message in HTDP is what's
called the Status Line.

14
00:01:08,900 --> 00:01:13,370
And the Status Line is composed of two
things.

15
00:01:13,370 --> 00:01:16,370
It's composed of a response code,

16
00:01:20,470 --> 00:01:28,080
which is a numeric code that tells us what
happened on the server.

17
00:01:28,080 --> 00:01:31,420
Did it successfully find the resource?

18
00:01:31,420 --> 00:01:33,750
Did it not find the resource?

19
00:01:33,750 --> 00:01:36,120
Did it encounter some other type of error?

20
00:01:37,120 --> 00:01:41,690
And that response code is really important
because it's telling the client.

21
00:01:41,690 --> 00:01:43,900
Here is what happened on the server.

22
00:01:43,900 --> 00:01:47,810
You couldn't directly observe what
happened, but I'm going to tell

23
00:01:47,810 --> 00:01:52,030
you what happened, so that you can take
the appropriate action.

24
00:01:53,490 --> 00:01:55,780
And a part of that response code is the,

25
00:01:55,780 --> 00:01:58,850
the first component is numeric, it's a
numeric response code.

26
00:01:58,850 --> 00:02:03,848
And the second part of the status line is
a phrase or a textual

27
00:02:03,848 --> 00:02:11,330
description of the reason for this code,
or the explanation of it.

28
00:02:11,330 --> 00:02:15,153
So, this is, you know, text that's being
set

29
00:02:15,153 --> 00:02:20,220
back to elaborate the response code that
was sent back.

30
00:02:20,220 --> 00:02:26,390
So, for example, if there's a, arbitrary
error, it may say there was a server here.

31
00:02:26,390 --> 00:02:32,020
And so the response code and the reason
phrase give us a hint as

32
00:02:32,020 --> 00:02:36,890
to what happened on the server, and allow
the client to take the appropriate action.

33
00:02:38,530 --> 00:02:45,530
The second component of an HTTP response
is a series of headers.

34
00:02:45,530 --> 00:02:49,920
So, just like we saw before with request,
we can send

35
00:02:49,920 --> 00:02:54,890
meta information to the client when we're
providing a response to help

36
00:02:54,890 --> 00:03:00,190
that client figure out how to interpret
that data that we're sending

37
00:03:00,190 --> 00:03:03,870
to it how to interpret the response that
we're sending to it.

38
00:03:03,870 --> 00:03:08,350
And usually a very important component of
the headers is as we

39
00:03:08,350 --> 00:03:13,290
saw with mim types the content type of
what we're sending back.

40
00:03:14,560 --> 00:03:19,140
And this is a really critical piece of
information to the client because the

41
00:03:19,140 --> 00:03:24,200
client needs to know what are you giving
me what is the format of it.

42
00:03:24,200 --> 00:03:25,840
And we would like to not

43
00:03:25,840 --> 00:03:29,260
hardcode necessarily and assume a
particular format.

44
00:03:29,260 --> 00:03:31,350
In many cases we end up hardcoding and

45
00:03:31,350 --> 00:03:34,350
assuming a particular format, but it's
better if we

46
00:03:34,350 --> 00:03:36,570
can sit, look at the content type and

47
00:03:36,570 --> 00:03:39,250
decide the format for the body of the
message.

48
00:03:40,370 --> 00:03:44,930
And then finally, we get the body, in the
response.

49
00:03:44,930 --> 00:03:50,690
And so this is the actual data, that, the
server, is sending back to us,

50
00:03:50,690 --> 00:03:57,440
in, response, to our HTTP request, to,
take some action on a resource.

51
00:03:57,440 --> 00:04:03,430
So the body may be the actual resource
itself, so, maybe we wanted to get

52
00:04:03,430 --> 00:04:08,880
an HTML file, that's just HTML and
textural format stored in

53
00:04:08,880 --> 00:04:14,610
the server and the server is gone and told
us it successfully retrieved that file.

54
00:04:14,610 --> 00:04:19,640
It is a content type text/HTML and in the
body

55
00:04:19,640 --> 00:04:23,940
is where we would find the actual data,
the textural data.

56
00:04:23,940 --> 00:04:31,170
For that HTML or for example we set a
request that was for image lets say jpeg

57
00:04:31,170 --> 00:04:34,370
image, the server would return a response
code to

58
00:04:34,370 --> 00:04:37,980
us telling us that it successfully found
that image.

59
00:04:37,980 --> 00:04:42,680
It will set the content type to
image/jpeg.

60
00:04:42,680 --> 00:04:44,990
And then it would, in the body, place the

61
00:04:44,990 --> 00:04:50,090
binary data for that image, the jpeg
encoding of that

62
00:04:50,090 --> 00:04:55,750
data and then we would go and pull it out
of the body and interpret it as an image.

63
00:04:56,770 --> 00:05:01,540
So, the response is very similar in
construction to the request.

64
00:05:01,540 --> 00:05:03,880
We have headers we have a body.

65
00:05:03,880 --> 00:05:06,320
But the very critical sort of difference
is we have

66
00:05:06,320 --> 00:05:10,020
this concept of a status on the server,
because we

67
00:05:10,020 --> 00:05:12,660
can't directly observe what's going on so
the server needs

68
00:05:12,660 --> 00:05:16,810
to tell us what happened in response to
our request.

69
00:05:16,810 --> 00:05:20,240
Did we make a mistake in the way that we
formatted the request?

70
00:05:20,240 --> 00:05:25,440
Did we try to access some resource that
the server doesn't know about.

71
00:05:25,440 --> 00:05:30,210
Did the server, you know, explode and have
an error and tell us about it.

72
00:05:30,210 --> 00:05:32,680
All of these things are communicated back
to us

73
00:05:32,680 --> 00:05:36,380
in the response so that our client can
react appropriately.

