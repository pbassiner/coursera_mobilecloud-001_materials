1
00:00:00,456 --> 00:00:09,338
[MUSIC]

2
00:00:09,338 --> 00:00:15,740
Normally, the client controls almost all
aspects of the communication in HTTP.

3
00:00:15,740 --> 00:00:19,160
And when I say controls, I mean, it's the
driver and

4
00:00:19,160 --> 00:00:24,060
instigator of the communication and what
messages it sends to the server.

5
00:00:25,210 --> 00:00:29,120
But occasionally it would be helpful for
the server to provide a hint to

6
00:00:29,120 --> 00:00:34,150
the client, about data that it would like
the client to provide in future requests.

7
00:00:35,190 --> 00:00:38,580
So, for example, let's say that you go to
a

8
00:00:38,580 --> 00:00:42,960
banking website, or a website like Amazon,
and you log in.

9
00:00:44,270 --> 00:00:47,600
Sometimes those websites and servers,
would like to

10
00:00:47,600 --> 00:00:50,980
provide a little data indicating that you
have logged

11
00:00:50,980 --> 00:00:53,370
in, and that you can provide to the
server,

12
00:00:53,370 --> 00:00:56,530
in order to prove that you actually logged
in.

13
00:00:56,530 --> 00:01:00,320
Because you're sending a series of
requests to the server.

14
00:01:00,320 --> 00:01:03,700
And on the server's side, it needs some
way of figuring

15
00:01:03,700 --> 00:01:09,130
out that you are the same client that sent
the previous request.

16
00:01:09,130 --> 00:01:11,800
Because you are going to send a request
and

17
00:01:11,800 --> 00:01:14,330
then you may go away for some period of

18
00:01:14,330 --> 00:01:16,400
time and come back and the server would
like

19
00:01:16,400 --> 00:01:18,920
to remember, for example, that you are
logged in.

20
00:01:18,920 --> 00:01:22,040
But in order to do that, typically it
needs to tell you

21
00:01:22,040 --> 00:01:27,782
to send some data to it, to prove that you
previously logged in.

22
00:01:27,782 --> 00:01:31,540
So, how does the server go about
indicating data that

23
00:01:31,540 --> 00:01:35,070
the client should store for the server and
send back to

24
00:01:35,070 --> 00:01:38,650
the server in the future, to help it
figure out

25
00:01:38,650 --> 00:01:41,810
who the client it or figure some state,
regarding the client.

26
00:01:43,220 --> 00:01:46,779
The way that we do this in HTTP is through
a mechanism called cookies.

27
00:01:50,450 --> 00:01:53,210
And what cookies are, are they are very
small

28
00:01:53,210 --> 00:01:56,960
limited pieces of data, that the server
sends back

29
00:01:56,960 --> 00:02:00,610
to the client and asks the client to
remember

30
00:02:00,610 --> 00:02:03,370
on its behalf and then send in future
request.

31
00:02:04,400 --> 00:02:07,730
Now because the server's sending this back
to the client, and

32
00:02:07,730 --> 00:02:10,410
the client could be a mobile phone, or it
could be

33
00:02:10,410 --> 00:02:15,020
a very powerful computer, the
specification for cookies is designed to

34
00:02:15,020 --> 00:02:17,400
be limited, it's supposed to be a little
bit of data.

35
00:02:17,400 --> 00:02:23,300
We don't want to overwhelm the client with
the data that we're asking it to store.

36
00:02:23,300 --> 00:02:25,660
We don't want to send back terabytes of
data and

37
00:02:25,660 --> 00:02:28,450
ask the client to store them on the
server's behalf.

38
00:02:29,550 --> 00:02:35,070
So, Cookies are very small pieces of data,
that get sent back to the client.

39
00:02:35,070 --> 00:02:41,449
And typically the way that cookies are
delivered to the client is a header

40
00:02:41,449 --> 00:02:46,695
is placed into the response of

41
00:02:46,695 --> 00:02:52,540
that the server is sending back to the
client.

42
00:02:54,500 --> 00:02:56,740
And what happens then is

43
00:03:00,170 --> 00:03:04,980
the client reads the cookie header,
extracts a little bit of data that the

44
00:03:04,980 --> 00:03:10,350
server is asking it to store and then
places it into a temporary storage.

45
00:03:10,350 --> 00:03:14,960
And then, on future request, when the
client sends the request, it will

46
00:03:14,960 --> 00:03:19,550
place the cookie back into the headers,
that it's sending to the server.

47
00:03:19,550 --> 00:03:21,920
So, the server can access that data again
and

48
00:03:21,920 --> 00:03:24,880
for example, automatically identify that
this is the same

49
00:03:24,880 --> 00:03:28,840
client that previously logged in or same
client that

50
00:03:28,840 --> 00:03:31,460
previously added a particular item to its
shopping cart.

51
00:03:32,470 --> 00:03:34,990
So cookies are important for a topic that

52
00:03:34,990 --> 00:03:37,350
we'll talk about later in the course,
called sessions.

53
00:03:38,760 --> 00:03:41,880
Now, another important thing to note is
that cookies, the

54
00:03:41,880 --> 00:03:45,960
server can try to give hints to indicate
what the

55
00:03:45,960 --> 00:03:48,280
client should do in terms of how long it
should

56
00:03:48,280 --> 00:03:52,940
store that data and the sensitivity and
security regarding that data.

57
00:03:52,940 --> 00:03:57,500
So for example, cookies typically have an
expiration date attached to them.

58
00:03:57,500 --> 00:04:01,950
And that's a time at which the server
wants the client to

59
00:04:01,950 --> 00:04:06,350
forget the cookie and stop sending it with
its request to the server.

60
00:04:06,350 --> 00:04:09,160
So for example, there's probably a limited
amount of time that

61
00:04:09,160 --> 00:04:13,120
the server would like to register, you as
being logged in.

62
00:04:13,120 --> 00:04:14,660
So, it wants to indicate to the client, at

63
00:04:14,660 --> 00:04:17,100
some point, it should forget about sending
that cookie to

64
00:04:17,100 --> 00:04:20,270
you anymore because the server isn't going
to register it

65
00:04:20,270 --> 00:04:23,571
as being a valid session or a log in
anymore.

66
00:04:25,120 --> 00:04:27,680
Similarly, there are certain Cookies for
example, that

67
00:04:27,680 --> 00:04:32,090
we don't want to transmit unencrypted in
HTTP request.

68
00:04:32,090 --> 00:04:37,880
Normally we just send HTTP requests over
the internet and we don't encrypt them.

69
00:04:37,880 --> 00:04:42,950
And there's another variant of HTTP that
we'll talk about later called HTTPS, where

70
00:04:42,950 --> 00:04:46,130
we do encrypt the data that we are sending
in order to protect it.

71
00:04:47,140 --> 00:04:49,460
But if we want to make sure that a cookie
is

72
00:04:49,460 --> 00:04:52,620
protected, we can say for example, client
only send this cookie

73
00:04:52,620 --> 00:04:56,690
back to the server if a secure link, or an

74
00:04:56,690 --> 00:05:01,160
HTTPS communication protocol is being used
to talk to the server.

75
00:05:02,230 --> 00:05:07,690
So there's a variety of different
indications that the server can provide

76
00:05:07,690 --> 00:05:11,140
to the client on how to handle the cookie,
and what is

77
00:05:11,140 --> 00:05:15,180
the right way to store it, how long to
store it, and

78
00:05:15,180 --> 00:05:18,790
when to send it or not send it, back to
the server.

79
00:05:18,790 --> 00:05:21,110
And so, all of these things are very
important for some

80
00:05:21,110 --> 00:05:24,400
of the concepts that we'll be talking
about later when we

81
00:05:24,400 --> 00:05:27,450
need to remember a little bit of data for
the servers,

82
00:05:27,450 --> 00:05:30,540
so that it can help figure out which
client is which.

