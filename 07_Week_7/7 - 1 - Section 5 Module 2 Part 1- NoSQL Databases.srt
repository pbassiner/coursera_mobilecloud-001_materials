1
00:00:00,601 --> 00:00:08,709
[MUSIC]

2
00:00:08,709 --> 00:00:13,480
NoSQL databases are a hot
topic in cloud computing.

3
00:00:13,480 --> 00:00:18,730
So what exactly are NoSQL databases,
and how do we change the way

4
00:00:18,730 --> 00:00:24,623
that we interact with our data if
we are using a NoSQL database?

5
00:00:24,623 --> 00:00:29,790
Well, generalizing about exactly what
a NoSQL database is, is a little bit hard.

6
00:00:29,790 --> 00:00:32,670
But at the most fundamental level,
one approach to

7
00:00:32,670 --> 00:00:38,250
thinking about many new SQL databases,
is to think of them as giant hash table.

8
00:00:38,250 --> 00:00:41,360
And, and second we'll give an example
of how this can be used to

9
00:00:41,360 --> 00:00:43,760
help understand what is going to be and

10
00:00:43,760 --> 00:00:49,902
efficient or, or less efficient design,
when interacting with a NoSQL database.

11
00:00:49,902 --> 00:00:54,255
At the basic level NoSQL databases
do what they say in their title,

12
00:00:54,255 --> 00:00:59,870
they don't give you full SQL like your
used to with a relational data base.

13
00:00:59,870 --> 00:01:01,340
So you can't necessarily go and

14
00:01:01,340 --> 00:01:05,060
do table joins easily or
other things that you would get with SQL.

15
00:01:05,060 --> 00:01:07,420
Now, if you don't know what SQL is,

16
00:01:07,420 --> 00:01:10,550
if you're not familiar with relational
databases, don't worry about it too much.

17
00:01:10,550 --> 00:01:13,620
You'll still be able to get
an understanding of what the key

18
00:01:13,620 --> 00:01:18,380
principles are behind NoSQL databases and
how to work with them and

19
00:01:18,380 --> 00:01:19,560
design and optimize for them.

20
00:01:21,050 --> 00:01:25,240
There are a variety of
styles of NoSQL databases.

21
00:01:25,240 --> 00:01:29,530
So, one of the common styles
is a key value store.

22
00:01:30,940 --> 00:01:38,580
And this is really the most most,
the closest thing to a pure hashmap.

23
00:01:38,580 --> 00:01:42,280
So you have keys, and you can go and
look up values associated with them.

24
00:01:42,280 --> 00:01:44,890
And these types of
databases often give you

25
00:01:44,890 --> 00:01:48,320
really high performance through this
very simple but powerful mechanism.

26
00:01:49,380 --> 00:01:56,290
Another type or style of databases is ones
that look like Google's Big Table, and

27
00:01:56,290 --> 00:02:01,010
these provide some greater
capabilities in terms of the query and

28
00:02:01,010 --> 00:02:03,360
structure and layout of the database.

29
00:02:03,360 --> 00:02:06,400
Isn't there a number of open
source alternatives that

30
00:02:06,400 --> 00:02:08,810
provide capabilities very
similar to Big Table.

31
00:02:10,110 --> 00:02:13,440
Another type,
is document-oriented, databases.

32
00:02:14,480 --> 00:02:18,130
So these provide much
greater structure and

33
00:02:18,130 --> 00:02:21,200
flexibility in the values
that are being stored, and

34
00:02:21,200 --> 00:02:25,500
the schemas of the particular values
that are being stored in the database.

35
00:02:25,500 --> 00:02:30,780
And some of them even store pure JSON
inside the values, so you can go and

36
00:02:30,780 --> 00:02:36,130
think of the values as JSON, or, or
object data that's very flexible.

37
00:02:36,130 --> 00:02:39,340
And then the final type,
which we are not going to talk about

38
00:02:39,340 --> 00:02:44,350
much is a graph database that's optimized
for doing traversals on a graph.

39
00:02:44,350 --> 00:02:46,120
Like finding the shortest path or

40
00:02:46,120 --> 00:02:51,110
finding nodes in the graph that
have a specific relationship.

41
00:02:51,110 --> 00:02:55,060
So, these are a variety of
styles of NoSQL databases.

42
00:02:55,060 --> 00:02:56,820
What we're going to focus primarily,

43
00:02:56,820 --> 00:03:01,560
initially on databases that have
this style and this style, and

44
00:03:01,560 --> 00:03:06,950
then we'll talk a little bit about Mongo
DB, which is a document oriented database

45
00:03:06,950 --> 00:03:10,240
that we will understand how
to operate with that as well.

46
00:03:11,390 --> 00:03:16,360
To help get an intuitive understanding of
how NoSQL databases work we're going to

47
00:03:16,360 --> 00:03:21,930
generalize a little bit and pretend NoSQL
databases all look like Java hashtables.

48
00:03:21,930 --> 00:03:27,510
And then we'll use that to help us
understand how we can improve our

49
00:03:27,510 --> 00:03:32,360
structuring and interactions with
the databases, if we have this mentality.

50
00:03:32,360 --> 00:03:36,900
So let's assume that our
database is a big hashmap.

51
00:03:36,900 --> 00:03:40,826
And rather than parametrize this thing,

52
00:03:40,826 --> 00:03:46,330
Iâ€™m going to say were going
to store purchases, by user.

53
00:03:46,330 --> 00:03:50,320
By user.

54
00:03:50,320 --> 00:03:54,376
Then we can go and
construct a particular hash map, or

55
00:03:54,376 --> 00:03:57,450
some other map structure to store this.

56
00:03:57,450 --> 00:04:03,176
So what we'd like to do, is the keys will
be the user, or the ID of the user and

57
00:04:03,176 --> 00:04:08,740
the value will be a list of
the purchases that that user has made.

58
00:04:08,740 --> 00:04:18,314
So if we wanted to go and
run a query to find the purchases,

59
00:04:18,314 --> 00:04:23,700
we could say something like list

60
00:04:23,700 --> 00:04:31,100
purchase P equals purchases by user.get.

61
00:04:31,100 --> 00:04:33,080
And we pass in some particular user.

62
00:04:35,140 --> 00:04:40,310
Now what happens if we want to go and
search for

63
00:04:40,310 --> 00:04:45,130
the list off all users that
have bought a particular item.

64
00:04:46,320 --> 00:04:51,000
Well suddenly, this query gets a lot
more challenging in this map world.

65
00:04:51,000 --> 00:04:56,450
So suddenly, we have to go and
iterate through all of the values

66
00:04:56,450 --> 00:05:01,530
to try to find a value that
matches what we're looking for.

67
00:05:01,530 --> 00:05:09,283
So in this case, we might have to

68
00:05:09,283 --> 00:05:19,047
do something like for, list purchase,

69
00:05:19,047 --> 00:05:27,410
PN purchases, by user.values.

70
00:05:27,410 --> 00:05:31,188
So now we're going to iterate
over every single value, and

71
00:05:31,188 --> 00:05:37,038
then we're going to say for, and
we're going to iterate over the purchases.

72
00:05:37,038 --> 00:05:43,230
We'll call this PS, P and PS.

73
00:05:45,230 --> 00:05:46,900
And then we're going to search for

74
00:05:46,900 --> 00:05:50,570
purchases that match the particular,
one that we're looking for.

75
00:05:50,570 --> 00:05:52,350
And if we find them,

76
00:05:52,350 --> 00:05:56,989
then we're going to try to get
the associated key, of the the user.

77
00:05:56,989 --> 00:06:00,240
And in, in this case this
actually would be hard to do.

78
00:06:00,240 --> 00:06:03,650
That we, we're not iterating over
the keys at the same times, so

79
00:06:03,650 --> 00:06:05,320
it's going to be kind of challenging.

80
00:06:05,320 --> 00:06:06,420
Now there are ways we could do it.

81
00:06:06,420 --> 00:06:09,410
We could iterate over the keys,
get the purchases for

82
00:06:09,410 --> 00:06:12,190
each user, then search the purchases.

83
00:06:12,190 --> 00:06:14,160
Which might be the better way to do it.

84
00:06:14,160 --> 00:06:20,720
But, the challenge is, as you can see
either way, it requires a lot more work.

85
00:06:20,720 --> 00:06:25,930
If we have to go and search for a
particular user that meets a criteria, so

86
00:06:25,930 --> 00:06:30,770
suddenly we need to know which
keys have a specific criteria for

87
00:06:30,770 --> 00:06:34,600
their value, it becomes harder to go and
get this data out.

88
00:06:34,600 --> 00:06:36,140
Whereas if we just want to know,

89
00:06:36,140 --> 00:06:40,770
what purchases does a user make,
this map is really fast.

90
00:06:40,770 --> 00:06:44,760
But the moment that we want to know which
users meet a particular criteria we have

91
00:06:44,760 --> 00:06:46,550
to go into a lot of work.

92
00:06:46,550 --> 00:06:48,580
And, in this case we're not
even doing the work correctly.

93
00:06:48,580 --> 00:06:52,050
We'd have to go and iterate through
the keys, get the list of purchases for

94
00:06:52,050 --> 00:06:53,190
each key.

95
00:06:53,190 --> 00:06:55,810
Oh, for each purch,
purchase we'd have to iterate over it.

96
00:06:55,810 --> 00:07:00,370
We'd have to check if it met some criteria
that we were looking for, and then if

97
00:07:00,370 --> 00:07:03,230
it did we'd have to store the key in
another list and then finally return it.

98
00:07:03,230 --> 00:07:08,790
And that's a whole lot more work than
a simple map lookup on a hash table,

99
00:07:08,790 --> 00:07:12,890
where we would go and just provide the key
and immediately get all the values back.

100
00:07:14,850 --> 00:07:16,316
So how can we get around this problem?

101
00:07:16,316 --> 00:07:22,450
Well in relational databases normally
we're trying to do something that's called

102
00:07:22,450 --> 00:07:26,940
normalization, that is we don't want to
have duplicate data in our data base.

103
00:07:26,940 --> 00:07:31,700
We want to have the representation
of some data item only exist once

104
00:07:31,700 --> 00:07:35,960
in the database we don't want to have
duplicates of that data over and over.

105
00:07:35,960 --> 00:07:36,670
But in this case,

106
00:07:36,670 --> 00:07:42,250
we can do something to vastly improve
the rate at which we can query things.

107
00:07:42,250 --> 00:07:47,240
And that is, if we want to be able to
query by particular purchases too,

108
00:07:47,240 --> 00:07:51,490
if we want to be able to find all of
the users that made a particular purchase,

109
00:07:51,490 --> 00:07:53,300
we can do some renormalization.

110
00:07:53,300 --> 00:07:57,360
That is, we can make,
do some duplication to make this faster.

111
00:07:57,360 --> 00:07:58,700
So we can have a second map, and

112
00:07:59,740 --> 00:08:09,000
we can make this users by purchase.

113
00:08:09,000 --> 00:08:12,500
And we would go and construct this map and
populate it in some way.

114
00:08:12,500 --> 00:08:17,520
And then if we want to know
which users have, created, or

115
00:08:17,520 --> 00:08:19,510
have purchased a particular item.

116
00:08:19,510 --> 00:08:26,060
We could go and List, you know, User, and

117
00:08:26,060 --> 00:08:33,781
we could call this buyers, equals users,

118
00:08:33,781 --> 00:08:39,750
by purchase.get.

119
00:08:39,750 --> 00:08:48,260
And we could pass in some particular
purchase that we were looking for.

120
00:08:48,260 --> 00:08:50,490
And that would instantly give
us all the users that had

121
00:08:50,490 --> 00:08:52,200
bought that particular item.

122
00:08:52,200 --> 00:08:54,270
And we still have the ability
to go in the other direction.

123
00:08:54,270 --> 00:09:01,043
If we wanted to say, list,

124
00:09:01,043 --> 00:09:09,010
purchases, they bought.

125
00:09:09,010 --> 00:09:14,709
We can still do this and say,

126
00:09:14,709 --> 00:09:20,890
purchases by user, get user.

127
00:09:22,380 --> 00:09:26,030
So in this case,
we can do either query every efficiently.

128
00:09:26,030 --> 00:09:30,540
If we want to know all the people that
bought some particular purchase or item,

129
00:09:30,540 --> 00:09:33,970
which we're going to call a purchase,
we can simply provide that key and

130
00:09:33,970 --> 00:09:36,050
we'll get back all of,
the list of those users.

131
00:09:36,050 --> 00:09:40,550
If we want to know all the purchases for a
particular user, we can provide that key.

132
00:09:40,550 --> 00:09:46,810
And so, by duplicating the data,
we've got the purchases in here and

133
00:09:46,810 --> 00:09:51,200
then, as values, and then we've got
the purchases over here as keys.

134
00:09:51,200 --> 00:09:55,700
And similar, we've got the users over here
as keys, and then down here as values.

135
00:09:55,700 --> 00:09:59,040
So sense, in a sense,
we're duplicating the data.

136
00:09:59,040 --> 00:10:03,650
In order to make our query faster, we're
being able to look things up easier rather

137
00:10:03,650 --> 00:10:07,340
than having to go and scan through
all of the values and look for them.

138
00:10:08,560 --> 00:10:11,280
But in the process,
we're duplicating this data and

139
00:10:11,280 --> 00:10:13,590
so we're going to have to
do a little bit more work.

140
00:10:13,590 --> 00:10:16,220
When we, whenever we go and update.

141
00:10:16,220 --> 00:10:18,820
The part, purchases for a particular user.

142
00:10:18,820 --> 00:10:20,090
So a user buys something.

143
00:10:20,090 --> 00:10:22,860
We're now going to have to
update it in two places.

144
00:10:22,860 --> 00:10:26,710
So the downside is,
is that our data isn't normalized anymore.

145
00:10:26,710 --> 00:10:28,650
We're now having duplications, so

146
00:10:28,650 --> 00:10:33,170
when we go and try to update, we have
to update it in more than one place.

147
00:10:33,170 --> 00:10:34,070
And if we want to go and

148
00:10:34,070 --> 00:10:38,570
do some type of restructuring of our
database, we're going to have to and

149
00:10:38,570 --> 00:10:42,480
update multiple places and
relationships between that data.

150
00:10:42,480 --> 00:10:46,330
But, the positive side is, is that we
can get the queries really quickly.

151
00:10:47,400 --> 00:10:49,890
So, if you think, sort of,
from this mentality,

152
00:10:49,890 --> 00:10:54,600
this gives you a bit of an intuitive
sense of how NoSQL databases work.

153
00:10:55,670 --> 00:11:00,080
Is, on some level,
they operate like hash tables.

154
00:11:00,080 --> 00:11:03,230
Even though many of them give
you additional features and

155
00:11:03,230 --> 00:11:08,290
capabilities, this is one of the primitive
ways that one can conceptualize how to

156
00:11:08,290 --> 00:11:10,080
improve the performance of the.

