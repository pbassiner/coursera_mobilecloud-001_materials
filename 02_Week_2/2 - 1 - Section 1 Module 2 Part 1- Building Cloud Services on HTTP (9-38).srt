1
00:00:00,362 --> 00:00:08,268
[MUSIC]

2
00:00:08,268 --> 00:00:13,046
So let's return to our example application
for inserting video

3
00:00:13,046 --> 00:00:18,100
into a database and cataloging that
information about the video.

4
00:00:18,100 --> 00:00:20,450
So that we can later go and retrieve these
videos off

5
00:00:20,450 --> 00:00:23,820
the file system and the meta data that
we've inserted for them.

6
00:00:23,820 --> 00:00:25,370
From this database of metadata.

7
00:00:26,410 --> 00:00:33,330
So, if we remember, we were sending
commands to the application.

8
00:00:33,330 --> 00:00:35,960
And we were doing this from the command
line.

9
00:00:35,960 --> 00:00:39,870
But what we like to do is have a mobile
application that's somewhere else.

10
00:00:39,870 --> 00:00:41,160
That's not on the same host.

11
00:00:41,160 --> 00:00:46,430
And we'd like this application to be
living, in the cloud.

12
00:00:47,600 --> 00:00:50,790
So we'd like all of this to live in the
cloud somewhere.

13
00:00:50,790 --> 00:00:55,500
So how do we get, the, mobile device to
send these commands

14
00:00:55,500 --> 00:00:58,880
which are received by the application and
stored somewhere in the cloud?

15
00:00:59,990 --> 00:01:03,470
Well, now that we've learned about HTTP.

16
00:01:03,470 --> 00:01:08,700
We know one of the communication protocols
that we could use to send these commands.

17
00:01:08,700 --> 00:01:16,740
So we can imagine that we are using HTTP
to send the commands to the application.

18
00:01:16,740 --> 00:01:22,220
So, for example, we might want to use a
PUT command to

19
00:01:22,220 --> 00:01:27,190
go and insert video into the application.

20
00:01:27,190 --> 00:01:32,320
So we might have PUT be the, the HTTP
method

21
00:01:32,320 --> 00:01:34,860
that we're using when we're going to store
a new video.

22
00:01:37,960 --> 00:01:45,650
Similarly, we might want to get a video
that's already been previously posted.

23
00:01:45,650 --> 00:01:51,720
So we might send a GET command to query
video or fetch the video.

24
00:01:53,960 --> 00:01:58,410
And then the application would receive
that GET command.

25
00:01:58,410 --> 00:01:59,280
Go and process it.

26
00:01:59,280 --> 00:02:02,010
And send the results back to us.

27
00:02:02,010 --> 00:02:03,540
As an HTTP response.

28
00:02:03,540 --> 00:02:04,040
And

29
00:02:09,010 --> 00:02:14,090
we even have HTTP request that are being
sent to carry out commands.

30
00:02:15,420 --> 00:02:20,820
Now, if we're going to send a request to
put a video, we're

31
00:02:20,820 --> 00:02:24,260
probably going to need to include the data
for that video with it.

32
00:02:24,260 --> 00:02:30,549
So for example, we could encode data for a
video, inside

33
00:02:30,549 --> 00:02:35,665
a multi-part request.

34
00:02:35,665 --> 00:02:41,620
Or a multi-part body, to be more specific.

35
00:02:41,620 --> 00:02:45,120
A multi-part body that's included with an
HTTP request.

36
00:02:45,120 --> 00:02:49,690
So we could, create a request that has
this multi part

37
00:02:49,690 --> 00:02:52,970
v, body that includes the video and we'd
go and store it.

38
00:02:52,970 --> 00:02:56,980
Similarly we might have inside that body,
not only the video,

39
00:02:56,980 --> 00:03:02,510
but we might also have, the name, as a key
value pair.

40
00:03:02,510 --> 00:03:06,250
So we have name, and then the actual name
of the video.

41
00:03:06,250 --> 00:03:08,420
We might also want to tell them some
extra,

42
00:03:08,420 --> 00:03:11,720
information, about that video to help
process it.

43
00:03:11,720 --> 00:03:15,850
So we might want to do something like we
could pr, print the content type.

44
00:03:15,850 --> 00:03:16,380
In a header.

45
00:03:19,760 --> 00:03:24,210
So that they would know information about
the format, or

46
00:03:24,210 --> 00:03:28,260
encoding of the video, that we're sending
to the server.

47
00:03:28,260 --> 00:03:31,930
So as we see, suddenly these HTTP

48
00:03:31,930 --> 00:03:34,540
constructs that we learned about have
direct

49
00:03:34,540 --> 00:03:37,900
relationship on this application scenario
that we've

50
00:03:37,900 --> 00:03:41,590
got where we're sending video to an
application.

51
00:03:41,590 --> 00:03:43,890
But suddenly, rather than doing this on
the command

52
00:03:43,890 --> 00:03:47,790
line, we are sending HTTP request to the
video.

53
00:03:47,790 --> 00:03:53,270
And we're encoding parts of those request
as multi-part bodies, or we could

54
00:03:53,270 --> 00:03:57,710
use URL encoded bodies, so for example if
we're sending video it probably makes

55
00:03:57,710 --> 00:04:02,870
sense but if we're doing a simple GET
query, it might make sense to send the

56
00:04:02,870 --> 00:04:10,200
query as parameters in the URL, so we have
query param-

57
00:04:10,200 --> 00:04:10,700
params.

58
00:04:11,710 --> 00:04:14,370
So how do we identify particular videos?

59
00:04:14,370 --> 00:04:17,180
Well each video might have a URL.

60
00:04:18,990 --> 00:04:24,723
So that we can address that video, we know
the host its stored on, and we know the

61
00:04:24,723 --> 00:04:30,940
path to that video on the server, so that
it can go and access it some way.

62
00:04:30,940 --> 00:04:34,860
So the resource naming schemes are giving
us the ability to

63
00:04:34,860 --> 00:04:38,970
go and address the resources that we're
storing in this case.

64
00:04:40,140 --> 00:04:44,860
Similarly, on the response side, we need
to know what happened with our commands?

65
00:04:44,860 --> 00:04:46,810
Did our commands work or not?

66
00:04:46,810 --> 00:04:53,210
So the HTTP response can have the HTTP
response code.

67
00:04:55,250 --> 00:05:00,670
And so we can look and say, you know, is
this a 200, did it find the video?

68
00:05:00,670 --> 00:05:02,120
Was it able to store the video?

69
00:05:02,120 --> 00:05:07,120
Or is this a error 500, did the server
crash in some way?

70
00:05:07,120 --> 00:05:08,680
Or is this a 404?

71
00:05:08,680 --> 00:05:11,749
Did I request a video that doesnt' exist.

72
00:05:13,000 --> 00:05:17,710
So the response code can give us
information about what's happening

73
00:05:17,710 --> 00:05:22,970
on the server when our commands are being
sent to the application.

74
00:05:22,970 --> 00:05:29,140
Similarly the response can include the
body, which will have the data.

75
00:05:29,140 --> 00:05:32,090
And this may be a video.

76
00:05:34,860 --> 00:05:41,940
Or this might be just text coming back
that's, you know, a set of key value pairs

77
00:05:41,940 --> 00:05:45,490
or some other information in response to a
query that we're issuing on the metadata.

78
00:05:46,490 --> 00:05:51,965
And again, we could tell the client what
it's getting

79
00:05:51,965 --> 00:05:57,320
back, either the type of video or the how
the key value

80
00:05:57,320 --> 00:06:03,173
pairs are encoded using the content type,
[SOUND] header.

81
00:06:03,173 --> 00:06:06,636
So, suddenly we are getting the ability to
express not only

82
00:06:06,636 --> 00:06:12,240
what we're sending the server but
information about what we're sending back.

83
00:06:12,240 --> 00:06:15,770
So HTTP is giving us a framework to

84
00:06:15,770 --> 00:06:18,580
build an application where we are sending
commands

85
00:06:18,580 --> 00:06:21,200
or messages to the service that's in the

86
00:06:21,200 --> 00:06:23,870
cloud and that's all we're going to term a
service.

87
00:06:23,870 --> 00:06:26,350
It's just an application that we moved
into the

88
00:06:26,350 --> 00:06:31,500
cloud that can receive these HTTP requests
that carry

89
00:06:31,500 --> 00:06:34,240
commands and then provide the output back
as HTTP

90
00:06:34,240 --> 00:06:38,260
responses and that's what we're going to
call our cloud service.

91
00:06:38,260 --> 00:06:40,250
Is it's just applications, just like

92
00:06:40,250 --> 00:06:43,140
you've built before that maybe took
parameters

93
00:06:43,140 --> 00:06:47,270
off the command line, but suddenly we're
taking them from the internet using HTTP.

94
00:06:47,270 --> 00:06:50,780
And we're going to be focused on cloud
services with

95
00:06:50,780 --> 00:06:55,770
HTTP because there's also other ways that
you could communicate,

96
00:06:55,770 --> 00:06:59,750
but HTTP is by far and away, the most
common

97
00:06:59,750 --> 00:07:03,739
method of communicating between mobile,
mobile devices and cloud services.

98
00:07:04,850 --> 00:07:09,730
So, we've built this entire framework
around the various constructs in HTTP

99
00:07:09,730 --> 00:07:14,700
that we can use to place our application
in the cloud and then

100
00:07:14,700 --> 00:07:19,790
send it commands which we can read and
process on the application side

101
00:07:19,790 --> 00:07:22,510
using these constructs that we understand,

102
00:07:22,510 --> 00:07:24,579
and then do something with the
information.

103
00:07:25,850 --> 00:07:32,000
Now, one of the questions that arises is,
there are lots of ways that we

104
00:07:32,000 --> 00:07:36,660
could express our command structure, our
expectations

105
00:07:36,660 --> 00:07:39,885
about the formatting of those commands in
HTTP.

106
00:07:41,000 --> 00:07:45,470
We can express the query parameters for
requests that we're sending

107
00:07:45,470 --> 00:07:49,760
for information about the, the metadata
that was stored with videos

108
00:07:49,760 --> 00:07:53,428
as query parameters or we could go and
express that information

109
00:07:53,428 --> 00:08:00,050
as a multi-part set of parameters or URL
encoded form parameters.

110
00:08:00,050 --> 00:08:03,380
We could store video with PUT request or

111
00:08:03,380 --> 00:08:05,010
we could decide that we want to store
video

112
00:08:05,010 --> 00:08:06,990
with a POST request because we can also

113
00:08:06,990 --> 00:08:09,930
send a multi-part body along with a post
request.

114
00:08:11,010 --> 00:08:17,740
We could use a delete HTTP method to tell
the

115
00:08:17,740 --> 00:08:20,140
server to go and remove a video or we
could

116
00:08:20,140 --> 00:08:23,930
just simply use a GET request to a
specific URL

117
00:08:23,930 --> 00:08:27,880
to indicate to the application that we
want to remove a video.

118
00:08:27,880 --> 00:08:31,700
So there's lots of things that we have to
consider when we're

119
00:08:31,700 --> 00:08:35,830
trying to figure out how do we map our
application onto HTTP.

120
00:08:35,830 --> 00:08:38,350
It, it give us a really, it gives us

121
00:08:38,350 --> 00:08:41,890
a really good structure for building these
applications, but there's

122
00:08:41,890 --> 00:08:45,750
still lots of design decisions that we
have regarding

123
00:08:45,750 --> 00:08:49,170
what are the structures that we use for
our URLs?

124
00:08:49,170 --> 00:08:52,560
How do we express where video is on the
server?

125
00:08:52,560 --> 00:08:54,420
because we could have arbitrary naming
schemes.

126
00:08:55,440 --> 00:09:00,670
Which of the HTP request methods do we
want to use for which actions?

127
00:09:00,670 --> 00:09:03,390
Do we allow doubling up of request
methods?

128
00:09:03,390 --> 00:09:06,170
For example, we could have a GET and a
POST, that

129
00:09:06,170 --> 00:09:11,680
both access the same query URL allowing us
to send a query.

130
00:09:11,680 --> 00:09:14,180
So we can have one version that allows

131
00:09:14,180 --> 00:09:16,720
us to send a GET request with query
parameters

132
00:09:16,720 --> 00:09:18,120
or we can have another version with a

133
00:09:18,120 --> 00:09:22,220
post request that sends URL encoded foam,
form parameters.

134
00:09:22,220 --> 00:09:24,410
And both of them would get the job done.

135
00:09:24,410 --> 00:09:31,360
So we have to understand all of these
areas where we can make design decisions

136
00:09:31,360 --> 00:09:37,940
and build on top of the HTTP protocol in
order to build a very complex application

