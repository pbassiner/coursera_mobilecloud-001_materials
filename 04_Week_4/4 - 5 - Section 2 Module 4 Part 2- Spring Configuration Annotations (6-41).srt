1
00:00:00,253 --> 00:00:08,682
[MUSIC]

2
00:00:08,682 --> 00:00:12,495
>> When you're using configurations to
automatically construct

3
00:00:12,495 --> 00:00:16,661
your application through dependency
injection in Spring, there are

4
00:00:16,661 --> 00:00:20,050
a number of annotations that Spring
provides that vastly

5
00:00:20,050 --> 00:00:24,640
simplify your life and work when creating
these configurations.

6
00:00:24,640 --> 00:00:30,240
So let's assume that we have a
configuration, you know, again, in our

7
00:00:30,240 --> 00:00:36,475
Application class.

8
00:00:36,475 --> 00:00:40,183
And, we have annotated this with
@configuration.

9
00:00:40,183 --> 00:00:44,015
[BLANK_AUDIO]

10
00:00:44,015 --> 00:00:46,823
Now we could go and think of every
different

11
00:00:46,823 --> 00:00:50,880
component in our application and define an
individual method

12
00:00:50,880 --> 00:00:54,546
with, that's annotated with @ being to
say, here's

13
00:00:54,546 --> 00:00:59,070
is how you go an construct that particular
component.

14
00:00:59,070 --> 00:01:00,870
Here's the interface as the return type.

15
00:01:00,870 --> 00:01:03,640
And here's the actual implementation of
that interface

16
00:01:03,640 --> 00:01:05,340
that I want you to use when it's
referenced.

17
00:01:06,520 --> 00:01:11,120
However, it's a lot of work, particularly
if there's only a single implementation

18
00:01:11,120 --> 00:01:16,150
of an interface or you have your
implementations divided in some nice way.

19
00:01:16,150 --> 00:01:18,170
For example where all of the imp-,

20
00:01:18,170 --> 00:01:22,460
implementations that are related in some
way all live in the same package.

21
00:01:22,460 --> 00:01:24,820
And wouldn't it be nice if you could tell
Spring to

22
00:01:24,820 --> 00:01:30,540
automatically go and find all of the
implementations of the various interfaces

23
00:01:30,540 --> 00:01:33,410
and automatically associate those
implementations with

24
00:01:33,410 --> 00:01:35,636
the interfaces so that wherever you

25
00:01:35,636 --> 00:01:40,710
@Autowired that interface in, it will use
the implementation that it's discovered.

26
00:01:40,710 --> 00:01:50,310
The way that you do that in Spring is you
can say @ComponentScan

27
00:01:50,310 --> 00:01:53,810
and you can provide it a series of package
names, Java package

28
00:01:53,810 --> 00:01:56,410
names, or prefixes to Java package names.

29
00:01:56,410 --> 00:01:59,600
So we could have com.mobile.

30
00:01:59,600 --> 00:02:00,100
And

31
00:02:03,850 --> 00:02:08,370
Spring is automatically going to go and
scan that package, find

32
00:02:08,370 --> 00:02:12,350
all of the interfaces, look at any
annotations on any of

33
00:02:12,350 --> 00:02:14,910
the interfaces or any of the classes in
that package as

34
00:02:14,910 --> 00:02:19,560
well, and then based on what it discovers
it will automatically decide.

35
00:02:19,560 --> 00:02:25,140
For example, if it finds an interface for
something that is @Autowired throughout

36
00:02:25,140 --> 00:02:30,080
your application and then it finds an
implementer of that interface, it will

37
00:02:30,080 --> 00:02:33,050
automatically associate that implemented
with that

38
00:02:33,050 --> 00:02:34,705
interface and then wherever there is an

39
00:02:34,705 --> 00:02:38,490
@Autowired for that interface it will take
the implementer in and insert it.

40
00:02:39,540 --> 00:02:41,270
This of course is assuming that there is a

41
00:02:41,270 --> 00:02:45,650
one to one mapping based on the component
scanned packages.

42
00:02:45,650 --> 00:02:47,160
So if it scans this package and

43
00:02:47,160 --> 00:02:49,540
there are multiple implementations of an
interface, it

44
00:02:49,540 --> 00:02:54,540
can't automatically decide which one
should go went

45
00:02:54,540 --> 00:02:58,220
into a particular object when it's being
autowired.

46
00:02:58,220 --> 00:03:00,140
Instead, this is good for when you

47
00:03:00,140 --> 00:03:03,680
have either exactly one implementation of
an interface,

48
00:03:03,680 --> 00:03:08,650
or you've divided up your implementations
into packages in some way so that you can

49
00:03:08,650 --> 00:03:11,640
component scan one package that will have

50
00:03:11,640 --> 00:03:14,630
all of the implementations, but only a
single

51
00:03:14,630 --> 00:03:17,850
implementation of each interface and
automatically allow Spring

52
00:03:17,850 --> 00:03:19,250
to figure out which one should go where.

53
00:03:20,500 --> 00:03:23,730
Another important annotation to know about
it

54
00:03:23,730 --> 00:03:25,560
is the annotation that tells Spring to go

55
00:03:25,560 --> 00:03:28,310
and look for all of the @Autowired

56
00:03:28,310 --> 00:03:31,010
annotations and actually go and fill them
in.

57
00:03:31,010 --> 00:03:33,310
If you don't add this particular
annotation to your

58
00:03:33,310 --> 00:03:38,100
configuration, Spring won't go and look
for those@Autowired annotations.

59
00:03:39,680 --> 00:03:41,650
So the annotation that we need

60
00:03:41,650 --> 00:03:47,232
to add to our configuration is
@EnableAutoConfiguration.

61
00:03:50,510 --> 00:03:56,683
And what this tells Spring to do is go and
look for, go look for the

62
00:03:56,683 --> 00:04:04,820
@Autowired annotations.

63
00:04:04,820 --> 00:04:07,080
And wherever you find one of them,

64
00:04:07,080 --> 00:04:10,150
automatically fill it in with an
appropriate value.

65
00:04:10,150 --> 00:04:11,648
So commonly you see

66
00:04:11,648 --> 00:04:17,000
@EnableAutoConfiguration and
@ComponentScan used together.

67
00:04:17,000 --> 00:04:21,547
So, you'll automatically go and find a
particular set of implementations

68
00:04:21,547 --> 00:04:25,594
that you want to use that you define,
defined in some package and

69
00:04:25,594 --> 00:04:28,009
then you will automatically enable auto

70
00:04:28,009 --> 00:04:32,060
configuration through
@EnableAutoConfiguration so that Spring

71
00:04:32,060 --> 00:04:35,707
will go and look for all the @Autowired's
and fill them in.

72
00:04:35,707 --> 00:04:40,051
And using these two you can simplify your
configuration class,

73
00:04:40,051 --> 00:04:43,591
because you don't have to go and
explicitly define a

74
00:04:43,591 --> 00:04:46,085
bean with a @ bean and then a method to

75
00:04:46,085 --> 00:04:51,100
retrieve the bean for every single
component in your application.

76
00:04:51,100 --> 00:04:54,000
You can simply allow Spring to discover
them

77
00:04:54,000 --> 00:04:57,370
and then to automatically autowire them
for you.

78
00:04:57,370 --> 00:04:58,880
Without going to all of the work they're

79
00:04:58,880 --> 00:05:03,230
defining each one individually or doing
anything else.

80
00:05:03,230 --> 00:05:07,090
Now, there is a slight downside to this.

81
00:05:07,090 --> 00:05:09,162
The downside is, is this that going

82
00:05:09,162 --> 00:05:12,827
and actually doing something like
automatically scanning all

83
00:05:12,827 --> 00:05:18,080
of the classes, and in particular package
and all of the sub-packages off of this.

84
00:05:18,080 --> 00:05:22,305
So if this is com.mobile and you have
com.mobile.data as a package and

85
00:05:22,305 --> 00:05:28,180
com.mobile.http as a package, all of those
sub-packages will be scanned as well.

86
00:05:28,180 --> 00:05:32,340
So if you have lots and lots of classes on

87
00:05:32,340 --> 00:05:36,170
your class path in all in the
sub-packages, it can take

88
00:05:36,170 --> 00:05:39,350
a while at launch time to actually go and
scan

89
00:05:39,350 --> 00:05:43,850
them all, read all of the autowired
instances, and configure everything.

90
00:05:43,850 --> 00:05:45,230
But the important thing to note is that

91
00:05:45,230 --> 00:05:48,010
this is only when you're starting up your
application.

92
00:05:48,010 --> 00:05:49,470
So as long as you're running in

93
00:05:49,470 --> 00:05:51,760
an environment where you're starting your
application

94
00:05:51,760 --> 00:05:57,230
up infrequently, which is the case in most
environments, this isn't a big deal.

95
00:05:57,230 --> 00:06:01,700
There actually are a subset of cloud
environments where the cloud service

96
00:06:01,700 --> 00:06:06,030
provider may shut your application down
when it's not receiving enough requests.

97
00:06:06,030 --> 00:06:08,030
And these are things like Google App
Engine.

98
00:06:08,030 --> 00:06:11,230
And in those cases, if you do this it can

99
00:06:11,230 --> 00:06:14,570
be a performance hit to your application
in Google App Engine.

100
00:06:14,570 --> 00:06:17,880
And there's lots of information on the web
about the impact

101
00:06:17,880 --> 00:06:20,670
of auto-configuration and component
scanning

102
00:06:20,670 --> 00:06:23,220
on applications on Google App Engine.

103
00:06:23,220 --> 00:06:26,650
So just be aware that this can simplify
your life,

104
00:06:26,650 --> 00:06:30,490
but at the same time, it can also create
problems

105
00:06:30,490 --> 00:06:34,450
from a performance perspective if you are
running on specific

106
00:06:34,450 --> 00:06:38,530
providers and they are continually
restarting your application over and over.

107
00:06:38,530 --> 00:06:41,390
But in most cases this is not a
performance set that we care about.

