1
00:00:00,000 --> 00:00:08,688
[MUSIC]

2
00:00:08,688 --> 00:00:11,772
There's a group of participants
that are involved in this idea of

3
00:00:11,772 --> 00:00:15,320
creating valet keys that we're
going to hand out to the web.

4
00:00:15,320 --> 00:00:20,770
So, let's look at what those participants
are, if we're going to use OAuth for

5
00:00:20,770 --> 00:00:22,060
doing mobile authentication.

6
00:00:22,060 --> 00:00:23,080
Now, when I say OAuth,

7
00:00:23,080 --> 00:00:26,410
I mean OAuth 2.0, although I'm going
to be saying OAuth over, and over.

8
00:00:26,410 --> 00:00:32,330
The first one is the resource server.

9
00:00:34,200 --> 00:00:40,610
And this is the entity that is responsible
for managing all of the resources.

10
00:00:40,610 --> 00:00:42,230
The bits of information, or

11
00:00:42,230 --> 00:00:48,600
the services that we would like to be
able to control access to using OAuth.

12
00:00:48,600 --> 00:00:52,130
So this is going to be like
your spring controllers.

13
00:00:52,130 --> 00:00:53,390
The data stored in your database.

14
00:00:53,390 --> 00:00:56,050
All these things are going to
be part of the resource server.

15
00:00:56,050 --> 00:00:58,660
So, this is really your
application that you're writing.

16
00:00:58,660 --> 00:01:00,240
Your spring based application or

17
00:01:00,240 --> 00:01:03,800
cloud service that you're writing,
you can think of as the resource server.

18
00:01:05,210 --> 00:01:12,200
The second piece of this is
the authorization server, and

19
00:01:12,200 --> 00:01:19,190
this is the server that is going
to be responsible for deciding who

20
00:01:19,190 --> 00:01:24,370
should get access to what, and managing
and brokering those types of interactions.

21
00:01:24,370 --> 00:01:26,710
And although the word server is used here,
there's,

22
00:01:26,710 --> 00:01:30,200
these things can be combined
into a single application.

23
00:01:30,200 --> 00:01:33,500
So, for example, when we use Spring OAuth,

24
00:01:33,500 --> 00:01:38,760
Spring provides a controller that plays
the role of the authorization server.

25
00:01:38,760 --> 00:01:42,420
So even though it's a controller and
all of our controllers are also running in

26
00:01:42,420 --> 00:01:45,730
the same application, it's still
called the authorization server.

27
00:01:45,730 --> 00:01:47,200
And then we have the resource server.

28
00:01:48,200 --> 00:01:53,000
And then we have the client
that is going to be

29
00:01:53,000 --> 00:01:57,420
trying to get access to
some particular resource.

30
00:01:57,420 --> 00:02:01,090
And then finally,
we have the resource owner,

31
00:02:03,640 --> 00:02:06,610
which you can think of as our users.

32
00:02:06,610 --> 00:02:10,150
So, we're going to also
say that this is a user.

33
00:02:10,150 --> 00:02:14,909
So, when the client wants to go and
get access to some resource.

34
00:02:16,070 --> 00:02:20,650
What's it's going to do is
it needs to get a valet key

35
00:02:20,650 --> 00:02:23,100
to give it access to
that particular resource.

36
00:02:24,100 --> 00:02:29,850
So, what the client does is it will go and
ask using one

37
00:02:29,850 --> 00:02:34,940
of the OAuth flows for the authorization
server to give it a valet key.

38
00:02:34,940 --> 00:02:38,892
Or in this case what we are going
to talk about is valet are tokens.

39
00:02:38,892 --> 00:02:43,435
So we're just going to do
something like send a request to

40
00:02:43,435 --> 00:02:49,450
/OAuth/token asking for
a particular token that it needs.

41
00:02:50,470 --> 00:02:54,730
Now depending on the particular
OAuth flow we're using,

42
00:02:54,730 --> 00:02:57,280
if the client already has a user name and

43
00:02:57,280 --> 00:03:03,280
password for the resource owner or
in this case the user in our system.

44
00:03:03,280 --> 00:03:05,430
The authorization servers can go and

45
00:03:05,430 --> 00:03:09,310
validate that information and
create the token that it needs.

46
00:03:09,310 --> 00:03:12,100
In the case that we're going to be
working on, we're going to be using.

47
00:03:12,100 --> 00:03:16,020
Because we're building a client for
our own service in the cloud, and

48
00:03:16,020 --> 00:03:18,170
we control the implementation
of that client and

49
00:03:18,170 --> 00:03:20,990
we trust it,
we're going to be using a password grant.

50
00:03:20,990 --> 00:03:23,870
Where we're going to actually
provide the login screen

51
00:03:23,870 --> 00:03:27,520
that allows the resource owner or
user to give their user name and

52
00:03:27,520 --> 00:03:31,319
password, so that the client can go and
get a token or valet key.

53
00:03:32,370 --> 00:03:36,430
However, if we were using one of
the other flows, what would happen is

54
00:03:36,430 --> 00:03:42,090
that the authorization server would send
a request back to the resource owner.

55
00:03:42,090 --> 00:03:45,130
Typically this is displaying
a login page to the resource owner.

56
00:03:45,130 --> 00:03:49,190
The resource owner would log in and then
the authorization server would give it an,

57
00:03:49,190 --> 00:03:53,720
another page saying,
this client wants access to X, Y and

58
00:03:53,720 --> 00:03:55,720
Z capabilities in your account.

59
00:03:55,720 --> 00:03:58,710
Are you okay with that, and
you would say, yes or no.

60
00:03:58,710 --> 00:04:01,030
And then the authorization server,
depending on what you said,

61
00:04:01,030 --> 00:04:03,940
would either give the client a token or
not give it a token.

62
00:04:05,070 --> 00:04:10,650
Now, in the flow that we're talking about,
we're going to be using a password grant.

63
00:04:10,650 --> 00:04:17,200
So, the user is actually going to
provide their user name and

64
00:04:17,200 --> 00:04:19,850
password to the client.

65
00:04:19,850 --> 00:04:22,670
Because we are building the client and
we're building the service, so

66
00:04:22,670 --> 00:04:25,660
we trust our particular client.

67
00:04:25,660 --> 00:04:29,390
So, the user name and password is
going to be provided to the client.

68
00:04:29,390 --> 00:04:33,560
The client is going to do
what's called a password grant.

69
00:04:33,560 --> 00:04:37,450
It's going to send a post request
to the authorization server.

70
00:04:37,450 --> 00:04:43,420
And then Spring, this post request
is going go to /OAuth/token.

71
00:04:43,420 --> 00:04:48,780
And inside of this post request,
there is going to be a request body that

72
00:04:48,780 --> 00:04:57,532
is the URL encoded key value pairs for
the username,

73
00:04:57,532 --> 00:05:02,540
the password.

74
00:05:02,540 --> 00:05:05,810
So these are the values that
were provided by the user or

75
00:05:05,810 --> 00:05:10,610
resource owner, the Client I.D..

76
00:05:10,610 --> 00:05:12,790
So, in this case
an identifier of our client.

77
00:05:12,790 --> 00:05:20,550
We are also going to have grant type,
type,

78
00:05:22,800 --> 00:05:29,390
and that's going to be equal to password.

79
00:05:29,390 --> 00:05:34,920
And then finally, if we want to,
we can have scopes, which is, we can

80
00:05:36,870 --> 00:05:43,830
ask for a specific set of, of resources
that we would like to have access to.

81
00:05:43,830 --> 00:05:45,590
So this is similar in,

82
00:05:45,590 --> 00:05:48,950
in many respects to the roles that we've
talked about with Spring Security.

83
00:05:48,950 --> 00:05:55,450
This is asking for, you know, a, a scope
to have access to on the resource server.

84
00:05:55,450 --> 00:05:59,320
And that will determine what this
valet key is good for or not good for.

85
00:05:59,320 --> 00:06:04,110
So, the scope is determining is this
a valet key that will turn the car on and

86
00:06:04,110 --> 00:06:06,910
allow me to park it,
will it allow me to lock the doors,

87
00:06:06,910 --> 00:06:10,680
will it allow me to open the trunk, will
it allow me to open the glove compartment.

88
00:06:10,680 --> 00:06:13,420
That's what the scope controls,
the scope of access.

89
00:06:14,590 --> 00:06:19,790
So, all of this will be sent to the
authorization server, and this will be URL

90
00:06:19,790 --> 00:06:25,760
encoded into the body of the request.

91
00:06:28,750 --> 00:06:33,970
Now, also in this, Spring requires,
with its implementation of this flow,

92
00:06:33,970 --> 00:06:36,115
that the client authenticate itself.

93
00:06:36,115 --> 00:06:43,980
So, HTTP Basic authen, authentication

94
00:06:43,980 --> 00:06:48,940
is going to be used for
the client and the client's password.

95
00:06:48,940 --> 00:06:52,450
So, this is for client.

96
00:06:52,450 --> 00:06:55,970
Now, the idea behind this is that,

97
00:06:55,970 --> 00:07:00,740
we can have a client that has, that we
trust more or less than another client.

98
00:07:00,740 --> 00:07:02,970
And so, on the server,

99
00:07:02,970 --> 00:07:06,510
we could store secrets that were
associated with specific clients.

100
00:07:06,510 --> 00:07:12,590
So, a client could prove its identity
by providing its ID and its secret.

101
00:07:12,590 --> 00:07:16,580
Now, in this case the client that we're
going to be installing on the mobile

102
00:07:16,580 --> 00:07:18,940
device is sort of out of our control,

103
00:07:18,940 --> 00:07:21,670
it's going on an infrastructure
that we don't control.

104
00:07:21,670 --> 00:07:25,540
And so
if we embedded a secret into this client,

105
00:07:25,540 --> 00:07:28,550
anybody could decompile our app and
simply take that secret out.

106
00:07:28,550 --> 00:07:32,810
So, it doesn't make sense in this case
to actually have a client's secret and

107
00:07:32,810 --> 00:07:34,130
authenticate the client.

108
00:07:34,130 --> 00:07:34,850
So in our case,

109
00:07:34,850 --> 00:07:38,490
we're actually just going to be using
HTTP Basic with an empty password.

110
00:07:38,490 --> 00:07:41,030
We're not going to be,
actually be assigning a password.

111
00:07:41,030 --> 00:07:44,430
The only reason we're doing this is
Spring actually requires that we

112
00:07:44,430 --> 00:07:49,550
use basic authentication for
the client as part of this,

113
00:07:49,550 --> 00:07:52,730
this flow because it is in the OAuth spec.

114
00:07:52,730 --> 00:07:56,490
But in this case we can't have a secret
and have it protected on the client.

115
00:07:56,490 --> 00:07:59,750
So, we're not going to provide a secret,

116
00:07:59,750 --> 00:08:02,540
we're just going to have
an empty password for the client.

117
00:08:02,540 --> 00:08:06,700
Now this may seem like scary,
like why are we using an empty password,

118
00:08:06,700 --> 00:08:08,270
doesn't that mean anyone can get access.

119
00:08:08,270 --> 00:08:10,130
And the answer is no.

120
00:08:10,130 --> 00:08:14,460
Anybody, they, they still have to
have a valid user name and password.

121
00:08:14,460 --> 00:08:17,360
And the token or the valet key
that we're going to be creating is

122
00:08:17,360 --> 00:08:19,690
still bound to this person's account.

123
00:08:19,690 --> 00:08:24,660
So, we're just not able to prove
that a client is a specific client.

124
00:08:24,660 --> 00:08:27,740
But we are using this flow because this
is the one that makes sense when you

125
00:08:27,740 --> 00:08:31,740
write both the client and
the server side of this stuff.

126
00:08:32,810 --> 00:08:36,560
What's going to happen is
the authorization server will then look at

127
00:08:36,560 --> 00:08:39,830
all of the information
that's been provided to it.

128
00:08:39,830 --> 00:08:44,620
And if all of it matches up to its
expectations, so the user name and

129
00:08:44,620 --> 00:08:50,030
password is right and the the HTTP basic
is there, and we have all of the other

130
00:08:50,030 --> 00:08:57,130
parameters that we need, then it's going
to return a token back to the client.

131
00:08:57,130 --> 00:09:02,260
And this token is, is simply a string that
the client will be able to use in a second

132
00:09:02,260 --> 00:09:07,740
when we talk about the next part of
access, to prove that his authenticated.

133
00:09:07,740 --> 00:09:11,900
And when it provides this token
back to the authorization server,

134
00:09:11,900 --> 00:09:16,230
the authorization server will allow
the client to get access to the specific

135
00:09:16,230 --> 00:09:21,150
resources that fall within the scope
of the token that it got, and

136
00:09:21,150 --> 00:09:24,850
the user account or,
of that particular resource owner.

137
00:09:26,300 --> 00:09:29,050
HTTP basic is a authorization mechanism,
or

138
00:09:29,050 --> 00:09:34,490
authentication mechanism, that's
incorporated into the OAuth 2.0 spec.

139
00:09:34,490 --> 00:09:36,550
And in this case,
in the flow that we're looking at,

140
00:09:36,550 --> 00:09:39,790
is being used to try to
authenticate the client.

141
00:09:39,790 --> 00:09:43,030
In our case, we're not actually using
it to do any authentication for

142
00:09:43,030 --> 00:09:49,030
us, but it is worthwhile to understand
how it works and how it's being used.

143
00:09:49,030 --> 00:09:54,170
With HTTP Basic authentication,
the client includes in a header.

144
00:09:54,170 --> 00:09:57,770
And these, all of this
communication should always over be

145
00:09:57,770 --> 00:10:03,320
HTTPS because we're going to be sending
a user name and password with our request.

146
00:10:03,320 --> 00:10:08,830
So in this request,
what we do is we include a header for

147
00:10:08,830 --> 00:10:15,840
authorization, and
the value of that header is basic.

148
00:10:15,840 --> 00:10:22,170
The word basic or
the keyword basic followed by

149
00:10:22,170 --> 00:10:29,060
the username, colon, password.

150
00:10:31,500 --> 00:10:37,804
And this information here
is then Base 64-encoded.

151
00:10:41,180 --> 00:10:42,130
So we ended up,

152
00:10:42,130 --> 00:10:51,894
we ended up with something
that looks like Authorization

153
00:10:51,894 --> 00:10:54,980
Basic.

154
00:10:54,980 --> 00:10:58,060
And then, I have no idea what a, you know,

155
00:10:58,060 --> 00:11:03,010
a proper hash, I mean base 64
encoded value will look like.

156
00:11:05,060 --> 00:11:10,110
But something along the lines of this,
where we have our authorization header and

157
00:11:10,110 --> 00:11:14,395
then the value for it is basic
with the user name colon password.

158
00:11:14,395 --> 00:11:17,340
Base 64 and coded into a string.

159
00:11:17,340 --> 00:11:21,230
And all of this is passed in
a header to the server and

160
00:11:21,230 --> 00:11:24,620
then the server can pull
out this part right here.

161
00:11:24,620 --> 00:11:27,137
It can see based on this
that the authorization, the,

162
00:11:27,137 --> 00:11:29,760
the authentication scheme
is supposed to be basic.

163
00:11:29,760 --> 00:11:36,510
It can then pull this value out and
extract the user name and

164
00:11:36,510 --> 00:11:40,390
pass out of the value, and
then use it for authentication.

165
00:11:40,390 --> 00:11:42,620
Now, you can see why it's so

166
00:11:42,620 --> 00:11:47,540
important that this run over HTTPS,
this is being sent in plain text.

167
00:11:47,540 --> 00:11:52,370
If you don't protect these requests that
have basic authentication with HTTPS,

168
00:11:52,370 --> 00:11:54,210
you're essentially sending
your user name and

169
00:11:54,210 --> 00:11:58,500
password over the network where
anybody could intercept it and see it.

170
00:11:58,500 --> 00:12:01,990
So it's really critical that
this always go over HTTPS.

171
00:12:01,990 --> 00:12:04,890
And in this flow that
we're looking at here,

172
00:12:04,890 --> 00:12:09,130
we're going to be sending that information
to the client, which is the user name or

173
00:12:09,130 --> 00:12:12,300
the client ID,
in this case is going to be the user name.

174
00:12:13,470 --> 00:12:15,970
So we're actually replicating
this bit of information.

175
00:12:15,970 --> 00:12:20,190
We're going to include it both in the,
the body of the request and

176
00:12:20,190 --> 00:12:23,530
in our authentication header or
authorization header.

177
00:12:23,530 --> 00:12:27,460
And then the password in our case for what
we're going to be doing is just the empty

178
00:12:27,460 --> 00:12:33,800
string, because we don't trust
the clients to have a client secret.

179
00:12:33,800 --> 00:12:35,740
If you did trust them, this would be,

180
00:12:35,740 --> 00:12:38,760
the client secret would be
the password down here.

181
00:12:38,760 --> 00:12:42,335
But in our case we can't
trust the platforms that our,

182
00:12:42,335 --> 00:12:44,510
that our apps are running on.

183
00:12:44,510 --> 00:12:47,130
Somebody else's mobile device,
if they took our app,

184
00:12:47,130 --> 00:12:49,000
they could easily extract
the client secret.

185
00:12:49,000 --> 00:12:50,160
So we're not going to
be providing you one.

