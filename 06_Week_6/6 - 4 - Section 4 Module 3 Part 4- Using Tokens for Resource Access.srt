1
00:00:00,134 --> 00:00:09,143
[MUSIC]

2
00:00:09,143 --> 00:00:13,170
Once we go and send the request
to the authorization server and

3
00:00:13,170 --> 00:00:17,737
get back the token that we are going
to use as our valet key, we can go and

4
00:00:17,737 --> 00:00:22,556
do things like try to get access to
the video service that we've created.

5
00:00:22,556 --> 00:00:26,824
And the way that we do this is
after we've gotten the token back,

6
00:00:26,824 --> 00:00:31,806
whenever we send the request to the
server, Spring is going to have a filter

7
00:00:31,806 --> 00:00:37,710
that's going to first look at the request
and check for the presence of a token.

8
00:00:37,710 --> 00:00:42,630
And then depending on what token is there
and what, security we've set up and

9
00:00:42,630 --> 00:00:46,870
things that we've done like adding
pre-authorize annotations to

10
00:00:46,870 --> 00:00:51,880
our video service, the Authorization
Server will decide if we can get access to

11
00:00:51,880 --> 00:00:55,980
a particular controller or controller
method that we're trying to access.

12
00:00:56,990 --> 00:01:00,730
So let's say that we wanted to go and
access the Video Server, and

13
00:01:00,730 --> 00:01:09,350
we sent a post request to /video.

14
00:01:09,350 --> 00:01:14,220
In order to tell the Authorization Server
that we, we've already authenticated and

15
00:01:14,220 --> 00:01:18,830
we've gotten a valet key,
we add an authorization header

16
00:01:20,810 --> 00:01:23,650
like we did for basic authentication.

17
00:01:23,650 --> 00:01:28,690
But rather than using
basic as the keyword,

18
00:01:28,690 --> 00:01:31,600
we use bearer meaning a bearer of tokens.

19
00:01:31,600 --> 00:01:37,850
Whoever has this particular token is,
should get access and get whatever rights

20
00:01:37,850 --> 00:01:42,600
associated with that token, and then we
provide the token we received before.

21
00:01:43,710 --> 00:01:49,470
So we go and use our password grant
to send a request to OAuth token and

22
00:01:49,470 --> 00:01:53,672
we get a token back, and then in all
future requests when we're going and

23
00:01:53,672 --> 00:01:59,100
send in a request to get access to
something like our video service,

24
00:01:59,100 --> 00:02:01,520
we add an authorization header.

25
00:02:01,520 --> 00:02:04,830
And then the value of it
is the word Bearer, and

26
00:02:04,830 --> 00:02:09,870
then the actual token that
we received back up here.

27
00:02:09,870 --> 00:02:13,830
And then what happens is, is that
the authorizations server will look at and

28
00:02:13,830 --> 00:02:19,860
it will check the request coming in,

29
00:02:19,860 --> 00:02:23,040
it will look at the bearer
token that we will provide.

30
00:02:23,040 --> 00:02:28,080
It will see if it's a valid token and
if it, and then based on the token that's

31
00:02:28,080 --> 00:02:31,730
provided, it will figure out what
user that token is associated with,

32
00:02:31,730 --> 00:02:33,130
what account that associated,

33
00:02:33,130 --> 00:02:36,250
token is associated with,
what scope that token has.

34
00:02:36,250 --> 00:02:39,170
So, what resources
should be accessible and

35
00:02:39,170 --> 00:02:44,410
then it will look at the video service or
whatever else you're trying to access and

36
00:02:44,410 --> 00:02:47,310
the security policies
associated with it and

37
00:02:47,310 --> 00:02:52,070
it will make a decision based on the token
the user that it's associated with,

38
00:02:52,070 --> 00:02:55,960
the scope that the token has and
the policy associated with

39
00:02:55,960 --> 00:03:00,160
the video service and
decide if that request can proceed or not.

40
00:03:00,160 --> 00:03:04,860
And then if it can, it will be sent to the
video service and you'll get a result back

41
00:03:04,860 --> 00:03:08,020
to your mobile client which will then
be displayed to the resource owner.

42
00:03:09,090 --> 00:03:13,230
And then, in the next request that
we send, yet again, we will go and

43
00:03:13,230 --> 00:03:18,670
we will provide this authorization and
bearer token as a header,

44
00:03:18,670 --> 00:03:23,050
in all of our requests, so
as long as we want access we

45
00:03:23,050 --> 00:03:28,190
have to keep providing this authorization
header with the bearer and the token.

46
00:03:28,190 --> 00:03:31,230
And the moment that we stop
providing that, the server will say,

47
00:03:31,230 --> 00:03:34,800
the authorization server will say
this person isn't authenticated.

48
00:03:34,800 --> 00:03:37,460
It's possible that these
tokens can expire,

49
00:03:37,460 --> 00:03:40,580
in which case if the token expires
the authorization server is going to say,

50
00:03:40,580 --> 00:03:43,600
yay you no longer have access, and
then you'll have to go through

51
00:03:43,600 --> 00:03:49,800
the flow again to get a new token
back from the authorization server.

52
00:03:49,800 --> 00:03:52,080
So this is the flow that
we're going to be using.

53
00:03:52,080 --> 00:03:57,680
Now just like with basic authentication,
it's really important that this flow,

54
00:03:57,680 --> 00:04:02,870
that anything we access with
a token always goes over HTTPS.

55
00:04:04,020 --> 00:04:08,730
There's no way that we can
protect that token unless we

56
00:04:08,730 --> 00:04:12,040
are sending all of our
requests over HTTPS.

57
00:04:12,040 --> 00:04:16,210
So whenever you're providing
the authorization header with a bearer and

58
00:04:16,210 --> 00:04:20,160
a token, you always need that
request to go over HTTPS.

59
00:04:20,160 --> 00:04:23,600
Otherwise it's insecure and
anybody else could take that token, and

60
00:04:23,600 --> 00:04:27,110
they began using it to get access
to the resources on the server.

